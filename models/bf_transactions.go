// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// BFTransaction is an object representing the database table.
type BFTransaction struct {
	ID                int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	TRDate            time.Time         `boil:"tr_date" json:"tr_date" toml:"tr_date" yaml:"tr_date"`
	Currency          string            `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	TRType            int               `boil:"tr_type" json:"tr_type" toml:"tr_type" yaml:"tr_type"`
	TRPrice           types.Decimal     `boil:"tr_price" json:"tr_price" toml:"tr_price" yaml:"tr_price"`
	Currency1         string            `boil:"currency1" json:"currency1" toml:"currency1" yaml:"currency1"`
	Currency1Quantity types.Decimal     `boil:"currency1_quantity" json:"currency1_quantity" toml:"currency1_quantity" yaml:"currency1_quantity"`
	Fee               types.Decimal     `boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	Currency1JpyRate  types.NullDecimal `boil:"currency1_jpy_rate" json:"currency1_jpy_rate,omitempty" toml:"currency1_jpy_rate" yaml:"currency1_jpy_rate,omitempty"`
	Currency2         null.String       `boil:"currency2" json:"currency2,omitempty" toml:"currency2" yaml:"currency2,omitempty"`
	Currency2Quantity types.Decimal     `boil:"currency2_quantity" json:"currency2_quantity" toml:"currency2_quantity" yaml:"currency2_quantity"`
	DealType          null.Int          `boil:"deal_type" json:"deal_type,omitempty" toml:"deal_type" yaml:"deal_type,omitempty"`
	OrderID           string            `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	Remarks           null.String       `boil:"remarks" json:"remarks,omitempty" toml:"remarks" yaml:"remarks,omitempty"`

	R *bfTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bfTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BFTransactionColumns = struct {
	ID                string
	TRDate            string
	Currency          string
	TRType            string
	TRPrice           string
	Currency1         string
	Currency1Quantity string
	Fee               string
	Currency1JpyRate  string
	Currency2         string
	Currency2Quantity string
	DealType          string
	OrderID           string
	Remarks           string
}{
	ID:                "id",
	TRDate:            "tr_date",
	Currency:          "currency",
	TRType:            "tr_type",
	TRPrice:           "tr_price",
	Currency1:         "currency1",
	Currency1Quantity: "currency1_quantity",
	Fee:               "fee",
	Currency1JpyRate:  "currency1_jpy_rate",
	Currency2:         "currency2",
	Currency2Quantity: "currency2_quantity",
	DealType:          "deal_type",
	OrderID:           "order_id",
	Remarks:           "remarks",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BFTransactionWhere = struct {
	ID                whereHelperint
	TRDate            whereHelpertime_Time
	Currency          whereHelperstring
	TRType            whereHelperint
	TRPrice           whereHelpertypes_Decimal
	Currency1         whereHelperstring
	Currency1Quantity whereHelpertypes_Decimal
	Fee               whereHelpertypes_Decimal
	Currency1JpyRate  whereHelpertypes_NullDecimal
	Currency2         whereHelpernull_String
	Currency2Quantity whereHelpertypes_Decimal
	DealType          whereHelpernull_Int
	OrderID           whereHelperstring
	Remarks           whereHelpernull_String
}{
	ID:                whereHelperint{field: "`bf_transactions`.`id`"},
	TRDate:            whereHelpertime_Time{field: "`bf_transactions`.`tr_date`"},
	Currency:          whereHelperstring{field: "`bf_transactions`.`currency`"},
	TRType:            whereHelperint{field: "`bf_transactions`.`tr_type`"},
	TRPrice:           whereHelpertypes_Decimal{field: "`bf_transactions`.`tr_price`"},
	Currency1:         whereHelperstring{field: "`bf_transactions`.`currency1`"},
	Currency1Quantity: whereHelpertypes_Decimal{field: "`bf_transactions`.`currency1_quantity`"},
	Fee:               whereHelpertypes_Decimal{field: "`bf_transactions`.`fee`"},
	Currency1JpyRate:  whereHelpertypes_NullDecimal{field: "`bf_transactions`.`currency1_jpy_rate`"},
	Currency2:         whereHelpernull_String{field: "`bf_transactions`.`currency2`"},
	Currency2Quantity: whereHelpertypes_Decimal{field: "`bf_transactions`.`currency2_quantity`"},
	DealType:          whereHelpernull_Int{field: "`bf_transactions`.`deal_type`"},
	OrderID:           whereHelperstring{field: "`bf_transactions`.`order_id`"},
	Remarks:           whereHelpernull_String{field: "`bf_transactions`.`remarks`"},
}

// BFTransactionRels is where relationship names are stored.
var BFTransactionRels = struct {
}{}

// bfTransactionR is where relationships are stored.
type bfTransactionR struct {
}

// NewStruct creates a new relationship struct
func (*bfTransactionR) NewStruct() *bfTransactionR {
	return &bfTransactionR{}
}

// bfTransactionL is where Load methods for each relationship are stored.
type bfTransactionL struct{}

var (
	bfTransactionAllColumns            = []string{"id", "tr_date", "currency", "tr_type", "tr_price", "currency1", "currency1_quantity", "fee", "currency1_jpy_rate", "currency2", "currency2_quantity", "deal_type", "order_id", "remarks"}
	bfTransactionColumnsWithoutDefault = []string{"tr_date", "currency", "tr_type", "tr_price", "currency1", "currency1_quantity", "fee", "currency1_jpy_rate", "currency2", "currency2_quantity", "deal_type", "order_id", "remarks"}
	bfTransactionColumnsWithDefault    = []string{"id"}
	bfTransactionPrimaryKeyColumns     = []string{"id"}
)

type (
	// BFTransactionSlice is an alias for a slice of pointers to BFTransaction.
	// This should generally be used opposed to []BFTransaction.
	BFTransactionSlice []*BFTransaction
	// BFTransactionHook is the signature for custom BFTransaction hook methods
	BFTransactionHook func(context.Context, boil.ContextExecutor, *BFTransaction) error

	bfTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bfTransactionType                 = reflect.TypeOf(&BFTransaction{})
	bfTransactionMapping              = queries.MakeStructMapping(bfTransactionType)
	bfTransactionPrimaryKeyMapping, _ = queries.BindMapping(bfTransactionType, bfTransactionMapping, bfTransactionPrimaryKeyColumns)
	bfTransactionInsertCacheMut       sync.RWMutex
	bfTransactionInsertCache          = make(map[string]insertCache)
	bfTransactionUpdateCacheMut       sync.RWMutex
	bfTransactionUpdateCache          = make(map[string]updateCache)
	bfTransactionUpsertCacheMut       sync.RWMutex
	bfTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bfTransactionBeforeInsertHooks []BFTransactionHook
var bfTransactionBeforeUpdateHooks []BFTransactionHook
var bfTransactionBeforeDeleteHooks []BFTransactionHook
var bfTransactionBeforeUpsertHooks []BFTransactionHook

var bfTransactionAfterInsertHooks []BFTransactionHook
var bfTransactionAfterSelectHooks []BFTransactionHook
var bfTransactionAfterUpdateHooks []BFTransactionHook
var bfTransactionAfterDeleteHooks []BFTransactionHook
var bfTransactionAfterUpsertHooks []BFTransactionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BFTransaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bfTransactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BFTransaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bfTransactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BFTransaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bfTransactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BFTransaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bfTransactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BFTransaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bfTransactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BFTransaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bfTransactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BFTransaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bfTransactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BFTransaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bfTransactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BFTransaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bfTransactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBFTransactionHook registers your hook function for all future operations.
func AddBFTransactionHook(hookPoint boil.HookPoint, bfTransactionHook BFTransactionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bfTransactionBeforeInsertHooks = append(bfTransactionBeforeInsertHooks, bfTransactionHook)
	case boil.BeforeUpdateHook:
		bfTransactionBeforeUpdateHooks = append(bfTransactionBeforeUpdateHooks, bfTransactionHook)
	case boil.BeforeDeleteHook:
		bfTransactionBeforeDeleteHooks = append(bfTransactionBeforeDeleteHooks, bfTransactionHook)
	case boil.BeforeUpsertHook:
		bfTransactionBeforeUpsertHooks = append(bfTransactionBeforeUpsertHooks, bfTransactionHook)
	case boil.AfterInsertHook:
		bfTransactionAfterInsertHooks = append(bfTransactionAfterInsertHooks, bfTransactionHook)
	case boil.AfterSelectHook:
		bfTransactionAfterSelectHooks = append(bfTransactionAfterSelectHooks, bfTransactionHook)
	case boil.AfterUpdateHook:
		bfTransactionAfterUpdateHooks = append(bfTransactionAfterUpdateHooks, bfTransactionHook)
	case boil.AfterDeleteHook:
		bfTransactionAfterDeleteHooks = append(bfTransactionAfterDeleteHooks, bfTransactionHook)
	case boil.AfterUpsertHook:
		bfTransactionAfterUpsertHooks = append(bfTransactionAfterUpsertHooks, bfTransactionHook)
	}
}

// One returns a single bfTransaction record from the query.
func (q bfTransactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BFTransaction, error) {
	o := &BFTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bf_transactions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BFTransaction records from the query.
func (q bfTransactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (BFTransactionSlice, error) {
	var o []*BFTransaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BFTransaction slice")
	}

	if len(bfTransactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BFTransaction records in the query.
func (q bfTransactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bf_transactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bfTransactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bf_transactions exists")
	}

	return count > 0, nil
}

// BFTransactions retrieves all the records using an executor.
func BFTransactions(mods ...qm.QueryMod) bfTransactionQuery {
	mods = append(mods, qm.From("`bf_transactions`"))
	return bfTransactionQuery{NewQuery(mods...)}
}

// FindBFTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBFTransaction(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BFTransaction, error) {
	bfTransactionObj := &BFTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bf_transactions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bfTransactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bf_transactions")
	}

	return bfTransactionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BFTransaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bf_transactions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bfTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bfTransactionInsertCacheMut.RLock()
	cache, cached := bfTransactionInsertCache[key]
	bfTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bfTransactionAllColumns,
			bfTransactionColumnsWithDefault,
			bfTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bfTransactionType, bfTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bfTransactionType, bfTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `bf_transactions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `bf_transactions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bf_transactions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bfTransactionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bf_transactions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bfTransactionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bf_transactions")
	}

CacheNoHooks:
	if !cached {
		bfTransactionInsertCacheMut.Lock()
		bfTransactionInsertCache[key] = cache
		bfTransactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BFTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BFTransaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bfTransactionUpdateCacheMut.RLock()
	cache, cached := bfTransactionUpdateCache[key]
	bfTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bfTransactionAllColumns,
			bfTransactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bf_transactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bf_transactions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bfTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bfTransactionType, bfTransactionMapping, append(wl, bfTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bf_transactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bf_transactions")
	}

	if !cached {
		bfTransactionUpdateCacheMut.Lock()
		bfTransactionUpdateCache[key] = cache
		bfTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bfTransactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bf_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bf_transactions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BFTransactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bfTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `bf_transactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bfTransactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bfTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bfTransaction")
	}
	return rowsAff, nil
}

var mySQLBFTransactionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BFTransaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bf_transactions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bfTransactionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBFTransactionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bfTransactionUpsertCacheMut.RLock()
	cache, cached := bfTransactionUpsertCache[key]
	bfTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bfTransactionAllColumns,
			bfTransactionColumnsWithDefault,
			bfTransactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bfTransactionAllColumns,
			bfTransactionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert bf_transactions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`bf_transactions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bf_transactions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bfTransactionType, bfTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bfTransactionType, bfTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for bf_transactions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bfTransactionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bfTransactionType, bfTransactionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for bf_transactions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bf_transactions")
	}

CacheNoHooks:
	if !cached {
		bfTransactionUpsertCacheMut.Lock()
		bfTransactionUpsertCache[key] = cache
		bfTransactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BFTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BFTransaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BFTransaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bfTransactionPrimaryKeyMapping)
	sql := "DELETE FROM `bf_transactions` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bf_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bf_transactions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bfTransactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bfTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bf_transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bf_transactions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BFTransactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bfTransactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bfTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `bf_transactions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bfTransactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bfTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bf_transactions")
	}

	if len(bfTransactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BFTransaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBFTransaction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BFTransactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BFTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bfTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `bf_transactions`.* FROM `bf_transactions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bfTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BFTransactionSlice")
	}

	*o = slice

	return nil
}

// BFTransactionExists checks if the BFTransaction row exists.
func BFTransactionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `bf_transactions` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bf_transactions exists")
	}

	return exists, nil
}
