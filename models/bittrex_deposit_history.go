// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// BittrexDepositHistory is an object representing the database table.
type BittrexDepositHistory struct {
	ID        int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	Timestamp time.Time     `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Currency  string        `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Quantity  types.Decimal `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	Status    string        `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *bittrexDepositHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bittrexDepositHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BittrexDepositHistoryColumns = struct {
	ID        string
	Timestamp string
	Currency  string
	Quantity  string
	Status    string
}{
	ID:        "id",
	Timestamp: "timestamp",
	Currency:  "currency",
	Quantity:  "quantity",
	Status:    "status",
}

// Generated where

var BittrexDepositHistoryWhere = struct {
	ID        whereHelperint
	Timestamp whereHelpertime_Time
	Currency  whereHelperstring
	Quantity  whereHelpertypes_Decimal
	Status    whereHelperstring
}{
	ID:        whereHelperint{field: "`bittrex_deposit_history`.`id`"},
	Timestamp: whereHelpertime_Time{field: "`bittrex_deposit_history`.`timestamp`"},
	Currency:  whereHelperstring{field: "`bittrex_deposit_history`.`currency`"},
	Quantity:  whereHelpertypes_Decimal{field: "`bittrex_deposit_history`.`quantity`"},
	Status:    whereHelperstring{field: "`bittrex_deposit_history`.`status`"},
}

// BittrexDepositHistoryRels is where relationship names are stored.
var BittrexDepositHistoryRels = struct {
}{}

// bittrexDepositHistoryR is where relationships are stored.
type bittrexDepositHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*bittrexDepositHistoryR) NewStruct() *bittrexDepositHistoryR {
	return &bittrexDepositHistoryR{}
}

// bittrexDepositHistoryL is where Load methods for each relationship are stored.
type bittrexDepositHistoryL struct{}

var (
	bittrexDepositHistoryAllColumns            = []string{"id", "timestamp", "currency", "quantity", "status"}
	bittrexDepositHistoryColumnsWithoutDefault = []string{"timestamp", "currency", "quantity", "status"}
	bittrexDepositHistoryColumnsWithDefault    = []string{"id"}
	bittrexDepositHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// BittrexDepositHistorySlice is an alias for a slice of pointers to BittrexDepositHistory.
	// This should generally be used opposed to []BittrexDepositHistory.
	BittrexDepositHistorySlice []*BittrexDepositHistory
	// BittrexDepositHistoryHook is the signature for custom BittrexDepositHistory hook methods
	BittrexDepositHistoryHook func(context.Context, boil.ContextExecutor, *BittrexDepositHistory) error

	bittrexDepositHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bittrexDepositHistoryType                 = reflect.TypeOf(&BittrexDepositHistory{})
	bittrexDepositHistoryMapping              = queries.MakeStructMapping(bittrexDepositHistoryType)
	bittrexDepositHistoryPrimaryKeyMapping, _ = queries.BindMapping(bittrexDepositHistoryType, bittrexDepositHistoryMapping, bittrexDepositHistoryPrimaryKeyColumns)
	bittrexDepositHistoryInsertCacheMut       sync.RWMutex
	bittrexDepositHistoryInsertCache          = make(map[string]insertCache)
	bittrexDepositHistoryUpdateCacheMut       sync.RWMutex
	bittrexDepositHistoryUpdateCache          = make(map[string]updateCache)
	bittrexDepositHistoryUpsertCacheMut       sync.RWMutex
	bittrexDepositHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bittrexDepositHistoryBeforeInsertHooks []BittrexDepositHistoryHook
var bittrexDepositHistoryBeforeUpdateHooks []BittrexDepositHistoryHook
var bittrexDepositHistoryBeforeDeleteHooks []BittrexDepositHistoryHook
var bittrexDepositHistoryBeforeUpsertHooks []BittrexDepositHistoryHook

var bittrexDepositHistoryAfterInsertHooks []BittrexDepositHistoryHook
var bittrexDepositHistoryAfterSelectHooks []BittrexDepositHistoryHook
var bittrexDepositHistoryAfterUpdateHooks []BittrexDepositHistoryHook
var bittrexDepositHistoryAfterDeleteHooks []BittrexDepositHistoryHook
var bittrexDepositHistoryAfterUpsertHooks []BittrexDepositHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BittrexDepositHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bittrexDepositHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BittrexDepositHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bittrexDepositHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BittrexDepositHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bittrexDepositHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BittrexDepositHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bittrexDepositHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BittrexDepositHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bittrexDepositHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BittrexDepositHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bittrexDepositHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BittrexDepositHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bittrexDepositHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BittrexDepositHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bittrexDepositHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BittrexDepositHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bittrexDepositHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBittrexDepositHistoryHook registers your hook function for all future operations.
func AddBittrexDepositHistoryHook(hookPoint boil.HookPoint, bittrexDepositHistoryHook BittrexDepositHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bittrexDepositHistoryBeforeInsertHooks = append(bittrexDepositHistoryBeforeInsertHooks, bittrexDepositHistoryHook)
	case boil.BeforeUpdateHook:
		bittrexDepositHistoryBeforeUpdateHooks = append(bittrexDepositHistoryBeforeUpdateHooks, bittrexDepositHistoryHook)
	case boil.BeforeDeleteHook:
		bittrexDepositHistoryBeforeDeleteHooks = append(bittrexDepositHistoryBeforeDeleteHooks, bittrexDepositHistoryHook)
	case boil.BeforeUpsertHook:
		bittrexDepositHistoryBeforeUpsertHooks = append(bittrexDepositHistoryBeforeUpsertHooks, bittrexDepositHistoryHook)
	case boil.AfterInsertHook:
		bittrexDepositHistoryAfterInsertHooks = append(bittrexDepositHistoryAfterInsertHooks, bittrexDepositHistoryHook)
	case boil.AfterSelectHook:
		bittrexDepositHistoryAfterSelectHooks = append(bittrexDepositHistoryAfterSelectHooks, bittrexDepositHistoryHook)
	case boil.AfterUpdateHook:
		bittrexDepositHistoryAfterUpdateHooks = append(bittrexDepositHistoryAfterUpdateHooks, bittrexDepositHistoryHook)
	case boil.AfterDeleteHook:
		bittrexDepositHistoryAfterDeleteHooks = append(bittrexDepositHistoryAfterDeleteHooks, bittrexDepositHistoryHook)
	case boil.AfterUpsertHook:
		bittrexDepositHistoryAfterUpsertHooks = append(bittrexDepositHistoryAfterUpsertHooks, bittrexDepositHistoryHook)
	}
}

// One returns a single bittrexDepositHistory record from the query.
func (q bittrexDepositHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BittrexDepositHistory, error) {
	o := &BittrexDepositHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bittrex_deposit_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BittrexDepositHistory records from the query.
func (q bittrexDepositHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (BittrexDepositHistorySlice, error) {
	var o []*BittrexDepositHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BittrexDepositHistory slice")
	}

	if len(bittrexDepositHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BittrexDepositHistory records in the query.
func (q bittrexDepositHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bittrex_deposit_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bittrexDepositHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bittrex_deposit_history exists")
	}

	return count > 0, nil
}

// BittrexDepositHistories retrieves all the records using an executor.
func BittrexDepositHistories(mods ...qm.QueryMod) bittrexDepositHistoryQuery {
	mods = append(mods, qm.From("`bittrex_deposit_history`"))
	return bittrexDepositHistoryQuery{NewQuery(mods...)}
}

// FindBittrexDepositHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBittrexDepositHistory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*BittrexDepositHistory, error) {
	bittrexDepositHistoryObj := &BittrexDepositHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `bittrex_deposit_history` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bittrexDepositHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bittrex_deposit_history")
	}

	return bittrexDepositHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BittrexDepositHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bittrex_deposit_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bittrexDepositHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bittrexDepositHistoryInsertCacheMut.RLock()
	cache, cached := bittrexDepositHistoryInsertCache[key]
	bittrexDepositHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bittrexDepositHistoryAllColumns,
			bittrexDepositHistoryColumnsWithDefault,
			bittrexDepositHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bittrexDepositHistoryType, bittrexDepositHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bittrexDepositHistoryType, bittrexDepositHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `bittrex_deposit_history` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `bittrex_deposit_history` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `bittrex_deposit_history` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, bittrexDepositHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bittrex_deposit_history")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bittrexDepositHistoryMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bittrex_deposit_history")
	}

CacheNoHooks:
	if !cached {
		bittrexDepositHistoryInsertCacheMut.Lock()
		bittrexDepositHistoryInsertCache[key] = cache
		bittrexDepositHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BittrexDepositHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BittrexDepositHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bittrexDepositHistoryUpdateCacheMut.RLock()
	cache, cached := bittrexDepositHistoryUpdateCache[key]
	bittrexDepositHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bittrexDepositHistoryAllColumns,
			bittrexDepositHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bittrex_deposit_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `bittrex_deposit_history` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, bittrexDepositHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bittrexDepositHistoryType, bittrexDepositHistoryMapping, append(wl, bittrexDepositHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bittrex_deposit_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bittrex_deposit_history")
	}

	if !cached {
		bittrexDepositHistoryUpdateCacheMut.Lock()
		bittrexDepositHistoryUpdateCache[key] = cache
		bittrexDepositHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bittrexDepositHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bittrex_deposit_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bittrex_deposit_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BittrexDepositHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bittrexDepositHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `bittrex_deposit_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bittrexDepositHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bittrexDepositHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bittrexDepositHistory")
	}
	return rowsAff, nil
}

var mySQLBittrexDepositHistoryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BittrexDepositHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bittrex_deposit_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bittrexDepositHistoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBittrexDepositHistoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bittrexDepositHistoryUpsertCacheMut.RLock()
	cache, cached := bittrexDepositHistoryUpsertCache[key]
	bittrexDepositHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bittrexDepositHistoryAllColumns,
			bittrexDepositHistoryColumnsWithDefault,
			bittrexDepositHistoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bittrexDepositHistoryAllColumns,
			bittrexDepositHistoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert bittrex_deposit_history, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`bittrex_deposit_history`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `bittrex_deposit_history` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(bittrexDepositHistoryType, bittrexDepositHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bittrexDepositHistoryType, bittrexDepositHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for bittrex_deposit_history")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bittrexDepositHistoryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(bittrexDepositHistoryType, bittrexDepositHistoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for bittrex_deposit_history")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bittrex_deposit_history")
	}

CacheNoHooks:
	if !cached {
		bittrexDepositHistoryUpsertCacheMut.Lock()
		bittrexDepositHistoryUpsertCache[key] = cache
		bittrexDepositHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BittrexDepositHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BittrexDepositHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BittrexDepositHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bittrexDepositHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `bittrex_deposit_history` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bittrex_deposit_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bittrex_deposit_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bittrexDepositHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bittrexDepositHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bittrex_deposit_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bittrex_deposit_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BittrexDepositHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bittrexDepositHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bittrexDepositHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `bittrex_deposit_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bittrexDepositHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bittrexDepositHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bittrex_deposit_history")
	}

	if len(bittrexDepositHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BittrexDepositHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBittrexDepositHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BittrexDepositHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BittrexDepositHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bittrexDepositHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `bittrex_deposit_history`.* FROM `bittrex_deposit_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bittrexDepositHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BittrexDepositHistorySlice")
	}

	*o = slice

	return nil
}

// BittrexDepositHistoryExists checks if the BittrexDepositHistory row exists.
func BittrexDepositHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `bittrex_deposit_history` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bittrex_deposit_history exists")
	}

	return exists, nil
}
