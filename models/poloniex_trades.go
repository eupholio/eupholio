// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PoloniexTrade is an object representing the database table.
type PoloniexTrade struct {
	ID                int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	Date              time.Time     `boil:"date" json:"date" toml:"date" yaml:"date"`
	Market            string        `boil:"market" json:"market" toml:"market" yaml:"market"`
	Type              string        `boil:"type" json:"type" toml:"type" yaml:"type"`
	Price             types.Decimal `boil:"price" json:"price" toml:"price" yaml:"price"`
	Amount            types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Total             types.Decimal `boil:"total" json:"total" toml:"total" yaml:"total"`
	Fee               string        `boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	OrderNumber       int64         `boil:"order_number" json:"order_number" toml:"order_number" yaml:"order_number"`
	BaseTotalLessFee  types.Decimal `boil:"base_total_less_fee" json:"base_total_less_fee" toml:"base_total_less_fee" yaml:"base_total_less_fee"`
	QuoteTotalLessFee types.Decimal `boil:"quote_total_less_fee" json:"quote_total_less_fee" toml:"quote_total_less_fee" yaml:"quote_total_less_fee"`
	FeeCurrency       string        `boil:"fee_currency" json:"fee_currency" toml:"fee_currency" yaml:"fee_currency"`
	FeeTotal          types.Decimal `boil:"fee_total" json:"fee_total" toml:"fee_total" yaml:"fee_total"`

	R *poloniexTradeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L poloniexTradeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PoloniexTradeColumns = struct {
	ID                string
	Date              string
	Market            string
	Type              string
	Price             string
	Amount            string
	Total             string
	Fee               string
	OrderNumber       string
	BaseTotalLessFee  string
	QuoteTotalLessFee string
	FeeCurrency       string
	FeeTotal          string
}{
	ID:                "id",
	Date:              "date",
	Market:            "market",
	Type:              "type",
	Price:             "price",
	Amount:            "amount",
	Total:             "total",
	Fee:               "fee",
	OrderNumber:       "order_number",
	BaseTotalLessFee:  "base_total_less_fee",
	QuoteTotalLessFee: "quote_total_less_fee",
	FeeCurrency:       "fee_currency",
	FeeTotal:          "fee_total",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PoloniexTradeWhere = struct {
	ID                whereHelperint
	Date              whereHelpertime_Time
	Market            whereHelperstring
	Type              whereHelperstring
	Price             whereHelpertypes_Decimal
	Amount            whereHelpertypes_Decimal
	Total             whereHelpertypes_Decimal
	Fee               whereHelperstring
	OrderNumber       whereHelperint64
	BaseTotalLessFee  whereHelpertypes_Decimal
	QuoteTotalLessFee whereHelpertypes_Decimal
	FeeCurrency       whereHelperstring
	FeeTotal          whereHelpertypes_Decimal
}{
	ID:                whereHelperint{field: "`poloniex_trades`.`id`"},
	Date:              whereHelpertime_Time{field: "`poloniex_trades`.`date`"},
	Market:            whereHelperstring{field: "`poloniex_trades`.`market`"},
	Type:              whereHelperstring{field: "`poloniex_trades`.`type`"},
	Price:             whereHelpertypes_Decimal{field: "`poloniex_trades`.`price`"},
	Amount:            whereHelpertypes_Decimal{field: "`poloniex_trades`.`amount`"},
	Total:             whereHelpertypes_Decimal{field: "`poloniex_trades`.`total`"},
	Fee:               whereHelperstring{field: "`poloniex_trades`.`fee`"},
	OrderNumber:       whereHelperint64{field: "`poloniex_trades`.`order_number`"},
	BaseTotalLessFee:  whereHelpertypes_Decimal{field: "`poloniex_trades`.`base_total_less_fee`"},
	QuoteTotalLessFee: whereHelpertypes_Decimal{field: "`poloniex_trades`.`quote_total_less_fee`"},
	FeeCurrency:       whereHelperstring{field: "`poloniex_trades`.`fee_currency`"},
	FeeTotal:          whereHelpertypes_Decimal{field: "`poloniex_trades`.`fee_total`"},
}

// PoloniexTradeRels is where relationship names are stored.
var PoloniexTradeRels = struct {
}{}

// poloniexTradeR is where relationships are stored.
type poloniexTradeR struct {
}

// NewStruct creates a new relationship struct
func (*poloniexTradeR) NewStruct() *poloniexTradeR {
	return &poloniexTradeR{}
}

// poloniexTradeL is where Load methods for each relationship are stored.
type poloniexTradeL struct{}

var (
	poloniexTradeAllColumns            = []string{"id", "date", "market", "type", "price", "amount", "total", "fee", "order_number", "base_total_less_fee", "quote_total_less_fee", "fee_currency", "fee_total"}
	poloniexTradeColumnsWithoutDefault = []string{"date", "market", "type", "price", "amount", "total", "fee", "order_number", "base_total_less_fee", "quote_total_less_fee", "fee_currency", "fee_total"}
	poloniexTradeColumnsWithDefault    = []string{"id"}
	poloniexTradePrimaryKeyColumns     = []string{"id"}
)

type (
	// PoloniexTradeSlice is an alias for a slice of pointers to PoloniexTrade.
	// This should generally be used opposed to []PoloniexTrade.
	PoloniexTradeSlice []*PoloniexTrade
	// PoloniexTradeHook is the signature for custom PoloniexTrade hook methods
	PoloniexTradeHook func(context.Context, boil.ContextExecutor, *PoloniexTrade) error

	poloniexTradeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	poloniexTradeType                 = reflect.TypeOf(&PoloniexTrade{})
	poloniexTradeMapping              = queries.MakeStructMapping(poloniexTradeType)
	poloniexTradePrimaryKeyMapping, _ = queries.BindMapping(poloniexTradeType, poloniexTradeMapping, poloniexTradePrimaryKeyColumns)
	poloniexTradeInsertCacheMut       sync.RWMutex
	poloniexTradeInsertCache          = make(map[string]insertCache)
	poloniexTradeUpdateCacheMut       sync.RWMutex
	poloniexTradeUpdateCache          = make(map[string]updateCache)
	poloniexTradeUpsertCacheMut       sync.RWMutex
	poloniexTradeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var poloniexTradeBeforeInsertHooks []PoloniexTradeHook
var poloniexTradeBeforeUpdateHooks []PoloniexTradeHook
var poloniexTradeBeforeDeleteHooks []PoloniexTradeHook
var poloniexTradeBeforeUpsertHooks []PoloniexTradeHook

var poloniexTradeAfterInsertHooks []PoloniexTradeHook
var poloniexTradeAfterSelectHooks []PoloniexTradeHook
var poloniexTradeAfterUpdateHooks []PoloniexTradeHook
var poloniexTradeAfterDeleteHooks []PoloniexTradeHook
var poloniexTradeAfterUpsertHooks []PoloniexTradeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PoloniexTrade) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexTradeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PoloniexTrade) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexTradeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PoloniexTrade) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexTradeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PoloniexTrade) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexTradeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PoloniexTrade) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexTradeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PoloniexTrade) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexTradeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PoloniexTrade) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexTradeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PoloniexTrade) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexTradeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PoloniexTrade) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexTradeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPoloniexTradeHook registers your hook function for all future operations.
func AddPoloniexTradeHook(hookPoint boil.HookPoint, poloniexTradeHook PoloniexTradeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		poloniexTradeBeforeInsertHooks = append(poloniexTradeBeforeInsertHooks, poloniexTradeHook)
	case boil.BeforeUpdateHook:
		poloniexTradeBeforeUpdateHooks = append(poloniexTradeBeforeUpdateHooks, poloniexTradeHook)
	case boil.BeforeDeleteHook:
		poloniexTradeBeforeDeleteHooks = append(poloniexTradeBeforeDeleteHooks, poloniexTradeHook)
	case boil.BeforeUpsertHook:
		poloniexTradeBeforeUpsertHooks = append(poloniexTradeBeforeUpsertHooks, poloniexTradeHook)
	case boil.AfterInsertHook:
		poloniexTradeAfterInsertHooks = append(poloniexTradeAfterInsertHooks, poloniexTradeHook)
	case boil.AfterSelectHook:
		poloniexTradeAfterSelectHooks = append(poloniexTradeAfterSelectHooks, poloniexTradeHook)
	case boil.AfterUpdateHook:
		poloniexTradeAfterUpdateHooks = append(poloniexTradeAfterUpdateHooks, poloniexTradeHook)
	case boil.AfterDeleteHook:
		poloniexTradeAfterDeleteHooks = append(poloniexTradeAfterDeleteHooks, poloniexTradeHook)
	case boil.AfterUpsertHook:
		poloniexTradeAfterUpsertHooks = append(poloniexTradeAfterUpsertHooks, poloniexTradeHook)
	}
}

// One returns a single poloniexTrade record from the query.
func (q poloniexTradeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PoloniexTrade, error) {
	o := &PoloniexTrade{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for poloniex_trades")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PoloniexTrade records from the query.
func (q poloniexTradeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PoloniexTradeSlice, error) {
	var o []*PoloniexTrade

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PoloniexTrade slice")
	}

	if len(poloniexTradeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PoloniexTrade records in the query.
func (q poloniexTradeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count poloniex_trades rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q poloniexTradeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if poloniex_trades exists")
	}

	return count > 0, nil
}

// PoloniexTrades retrieves all the records using an executor.
func PoloniexTrades(mods ...qm.QueryMod) poloniexTradeQuery {
	mods = append(mods, qm.From("`poloniex_trades`"))
	return poloniexTradeQuery{NewQuery(mods...)}
}

// FindPoloniexTrade retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPoloniexTrade(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PoloniexTrade, error) {
	poloniexTradeObj := &PoloniexTrade{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `poloniex_trades` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, poloniexTradeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from poloniex_trades")
	}

	return poloniexTradeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PoloniexTrade) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no poloniex_trades provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(poloniexTradeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	poloniexTradeInsertCacheMut.RLock()
	cache, cached := poloniexTradeInsertCache[key]
	poloniexTradeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			poloniexTradeAllColumns,
			poloniexTradeColumnsWithDefault,
			poloniexTradeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(poloniexTradeType, poloniexTradeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(poloniexTradeType, poloniexTradeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `poloniex_trades` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `poloniex_trades` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `poloniex_trades` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, poloniexTradePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into poloniex_trades")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == poloniexTradeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for poloniex_trades")
	}

CacheNoHooks:
	if !cached {
		poloniexTradeInsertCacheMut.Lock()
		poloniexTradeInsertCache[key] = cache
		poloniexTradeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PoloniexTrade.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PoloniexTrade) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	poloniexTradeUpdateCacheMut.RLock()
	cache, cached := poloniexTradeUpdateCache[key]
	poloniexTradeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			poloniexTradeAllColumns,
			poloniexTradePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update poloniex_trades, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `poloniex_trades` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, poloniexTradePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(poloniexTradeType, poloniexTradeMapping, append(wl, poloniexTradePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update poloniex_trades row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for poloniex_trades")
	}

	if !cached {
		poloniexTradeUpdateCacheMut.Lock()
		poloniexTradeUpdateCache[key] = cache
		poloniexTradeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q poloniexTradeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for poloniex_trades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for poloniex_trades")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PoloniexTradeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), poloniexTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `poloniex_trades` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, poloniexTradePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in poloniexTrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all poloniexTrade")
	}
	return rowsAff, nil
}

var mySQLPoloniexTradeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PoloniexTrade) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no poloniex_trades provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(poloniexTradeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPoloniexTradeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	poloniexTradeUpsertCacheMut.RLock()
	cache, cached := poloniexTradeUpsertCache[key]
	poloniexTradeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			poloniexTradeAllColumns,
			poloniexTradeColumnsWithDefault,
			poloniexTradeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			poloniexTradeAllColumns,
			poloniexTradePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert poloniex_trades, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`poloniex_trades`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `poloniex_trades` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(poloniexTradeType, poloniexTradeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(poloniexTradeType, poloniexTradeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for poloniex_trades")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == poloniexTradeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(poloniexTradeType, poloniexTradeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for poloniex_trades")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for poloniex_trades")
	}

CacheNoHooks:
	if !cached {
		poloniexTradeUpsertCacheMut.Lock()
		poloniexTradeUpsertCache[key] = cache
		poloniexTradeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PoloniexTrade record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PoloniexTrade) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PoloniexTrade provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), poloniexTradePrimaryKeyMapping)
	sql := "DELETE FROM `poloniex_trades` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from poloniex_trades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for poloniex_trades")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q poloniexTradeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no poloniexTradeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from poloniex_trades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for poloniex_trades")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PoloniexTradeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(poloniexTradeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), poloniexTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `poloniex_trades` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, poloniexTradePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from poloniexTrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for poloniex_trades")
	}

	if len(poloniexTradeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PoloniexTrade) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPoloniexTrade(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PoloniexTradeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PoloniexTradeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), poloniexTradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `poloniex_trades`.* FROM `poloniex_trades` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, poloniexTradePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PoloniexTradeSlice")
	}

	*o = slice

	return nil
}

// PoloniexTradeExists checks if the PoloniexTrade row exists.
func PoloniexTradeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `poloniex_trades` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if poloniex_trades exists")
	}

	return exists, nil
}
