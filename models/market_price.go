// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MarketPrice is an object representing the database table.
type MarketPrice struct {
	Source       string        `boil:"source" json:"source" toml:"source" yaml:"source"`
	Currency     string        `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Time         time.Time     `boil:"time" json:"time" toml:"time" yaml:"time"`
	BaseCurrency string        `boil:"base_currency" json:"base_currency" toml:"base_currency" yaml:"base_currency"`
	Price        types.Decimal `boil:"price" json:"price" toml:"price" yaml:"price"`

	R *marketPriceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L marketPriceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MarketPriceColumns = struct {
	Source       string
	Currency     string
	Time         string
	BaseCurrency string
	Price        string
}{
	Source:       "source",
	Currency:     "currency",
	Time:         "time",
	BaseCurrency: "base_currency",
	Price:        "price",
}

// Generated where

var MarketPriceWhere = struct {
	Source       whereHelperstring
	Currency     whereHelperstring
	Time         whereHelpertime_Time
	BaseCurrency whereHelperstring
	Price        whereHelpertypes_Decimal
}{
	Source:       whereHelperstring{field: "`market_price`.`source`"},
	Currency:     whereHelperstring{field: "`market_price`.`currency`"},
	Time:         whereHelpertime_Time{field: "`market_price`.`time`"},
	BaseCurrency: whereHelperstring{field: "`market_price`.`base_currency`"},
	Price:        whereHelpertypes_Decimal{field: "`market_price`.`price`"},
}

// MarketPriceRels is where relationship names are stored.
var MarketPriceRels = struct {
}{}

// marketPriceR is where relationships are stored.
type marketPriceR struct {
}

// NewStruct creates a new relationship struct
func (*marketPriceR) NewStruct() *marketPriceR {
	return &marketPriceR{}
}

// marketPriceL is where Load methods for each relationship are stored.
type marketPriceL struct{}

var (
	marketPriceAllColumns            = []string{"source", "currency", "time", "base_currency", "price"}
	marketPriceColumnsWithoutDefault = []string{"source", "currency", "time", "base_currency", "price"}
	marketPriceColumnsWithDefault    = []string{}
	marketPricePrimaryKeyColumns     = []string{"source", "base_currency", "currency", "time"}
)

type (
	// MarketPriceSlice is an alias for a slice of pointers to MarketPrice.
	// This should generally be used opposed to []MarketPrice.
	MarketPriceSlice []*MarketPrice
	// MarketPriceHook is the signature for custom MarketPrice hook methods
	MarketPriceHook func(context.Context, boil.ContextExecutor, *MarketPrice) error

	marketPriceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	marketPriceType                 = reflect.TypeOf(&MarketPrice{})
	marketPriceMapping              = queries.MakeStructMapping(marketPriceType)
	marketPricePrimaryKeyMapping, _ = queries.BindMapping(marketPriceType, marketPriceMapping, marketPricePrimaryKeyColumns)
	marketPriceInsertCacheMut       sync.RWMutex
	marketPriceInsertCache          = make(map[string]insertCache)
	marketPriceUpdateCacheMut       sync.RWMutex
	marketPriceUpdateCache          = make(map[string]updateCache)
	marketPriceUpsertCacheMut       sync.RWMutex
	marketPriceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var marketPriceBeforeInsertHooks []MarketPriceHook
var marketPriceBeforeUpdateHooks []MarketPriceHook
var marketPriceBeforeDeleteHooks []MarketPriceHook
var marketPriceBeforeUpsertHooks []MarketPriceHook

var marketPriceAfterInsertHooks []MarketPriceHook
var marketPriceAfterSelectHooks []MarketPriceHook
var marketPriceAfterUpdateHooks []MarketPriceHook
var marketPriceAfterDeleteHooks []MarketPriceHook
var marketPriceAfterUpsertHooks []MarketPriceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MarketPrice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketPriceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MarketPrice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketPriceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MarketPrice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketPriceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MarketPrice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketPriceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MarketPrice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketPriceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MarketPrice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketPriceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MarketPrice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketPriceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MarketPrice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketPriceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MarketPrice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketPriceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMarketPriceHook registers your hook function for all future operations.
func AddMarketPriceHook(hookPoint boil.HookPoint, marketPriceHook MarketPriceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		marketPriceBeforeInsertHooks = append(marketPriceBeforeInsertHooks, marketPriceHook)
	case boil.BeforeUpdateHook:
		marketPriceBeforeUpdateHooks = append(marketPriceBeforeUpdateHooks, marketPriceHook)
	case boil.BeforeDeleteHook:
		marketPriceBeforeDeleteHooks = append(marketPriceBeforeDeleteHooks, marketPriceHook)
	case boil.BeforeUpsertHook:
		marketPriceBeforeUpsertHooks = append(marketPriceBeforeUpsertHooks, marketPriceHook)
	case boil.AfterInsertHook:
		marketPriceAfterInsertHooks = append(marketPriceAfterInsertHooks, marketPriceHook)
	case boil.AfterSelectHook:
		marketPriceAfterSelectHooks = append(marketPriceAfterSelectHooks, marketPriceHook)
	case boil.AfterUpdateHook:
		marketPriceAfterUpdateHooks = append(marketPriceAfterUpdateHooks, marketPriceHook)
	case boil.AfterDeleteHook:
		marketPriceAfterDeleteHooks = append(marketPriceAfterDeleteHooks, marketPriceHook)
	case boil.AfterUpsertHook:
		marketPriceAfterUpsertHooks = append(marketPriceAfterUpsertHooks, marketPriceHook)
	}
}

// One returns a single marketPrice record from the query.
func (q marketPriceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MarketPrice, error) {
	o := &MarketPrice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for market_price")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MarketPrice records from the query.
func (q marketPriceQuery) All(ctx context.Context, exec boil.ContextExecutor) (MarketPriceSlice, error) {
	var o []*MarketPrice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MarketPrice slice")
	}

	if len(marketPriceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MarketPrice records in the query.
func (q marketPriceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count market_price rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q marketPriceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if market_price exists")
	}

	return count > 0, nil
}

// MarketPrices retrieves all the records using an executor.
func MarketPrices(mods ...qm.QueryMod) marketPriceQuery {
	mods = append(mods, qm.From("`market_price`"))
	return marketPriceQuery{NewQuery(mods...)}
}

// FindMarketPrice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMarketPrice(ctx context.Context, exec boil.ContextExecutor, source string, baseCurrency string, currency string, time time.Time, selectCols ...string) (*MarketPrice, error) {
	marketPriceObj := &MarketPrice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `market_price` where `source`=? AND `base_currency`=? AND `currency`=? AND `time`=?", sel,
	)

	q := queries.Raw(query, source, baseCurrency, currency, time)

	err := q.Bind(ctx, exec, marketPriceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from market_price")
	}

	return marketPriceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MarketPrice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no market_price provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketPriceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	marketPriceInsertCacheMut.RLock()
	cache, cached := marketPriceInsertCache[key]
	marketPriceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			marketPriceAllColumns,
			marketPriceColumnsWithDefault,
			marketPriceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(marketPriceType, marketPriceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(marketPriceType, marketPriceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `market_price` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `market_price` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `market_price` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, marketPricePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into market_price")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Source,
		o.BaseCurrency,
		o.Currency,
		o.Time,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for market_price")
	}

CacheNoHooks:
	if !cached {
		marketPriceInsertCacheMut.Lock()
		marketPriceInsertCache[key] = cache
		marketPriceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MarketPrice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MarketPrice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	marketPriceUpdateCacheMut.RLock()
	cache, cached := marketPriceUpdateCache[key]
	marketPriceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			marketPriceAllColumns,
			marketPricePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update market_price, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `market_price` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, marketPricePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(marketPriceType, marketPriceMapping, append(wl, marketPricePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update market_price row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for market_price")
	}

	if !cached {
		marketPriceUpdateCacheMut.Lock()
		marketPriceUpdateCache[key] = cache
		marketPriceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q marketPriceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for market_price")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for market_price")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MarketPriceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `market_price` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, marketPricePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in marketPrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all marketPrice")
	}
	return rowsAff, nil
}

var mySQLMarketPriceUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MarketPrice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no market_price provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketPriceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLMarketPriceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	marketPriceUpsertCacheMut.RLock()
	cache, cached := marketPriceUpsertCache[key]
	marketPriceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			marketPriceAllColumns,
			marketPriceColumnsWithDefault,
			marketPriceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			marketPriceAllColumns,
			marketPricePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert market_price, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`market_price`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `market_price` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(marketPriceType, marketPriceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(marketPriceType, marketPriceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for market_price")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(marketPriceType, marketPriceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for market_price")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for market_price")
	}

CacheNoHooks:
	if !cached {
		marketPriceUpsertCacheMut.Lock()
		marketPriceUpsertCache[key] = cache
		marketPriceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MarketPrice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MarketPrice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MarketPrice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), marketPricePrimaryKeyMapping)
	sql := "DELETE FROM `market_price` WHERE `source`=? AND `base_currency`=? AND `currency`=? AND `time`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from market_price")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for market_price")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q marketPriceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no marketPriceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from market_price")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for market_price")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MarketPriceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(marketPriceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `market_price` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, marketPricePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from marketPrice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for market_price")
	}

	if len(marketPriceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MarketPrice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMarketPrice(ctx, exec, o.Source, o.BaseCurrency, o.Currency, o.Time)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketPriceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MarketPriceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketPricePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `market_price`.* FROM `market_price` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, marketPricePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MarketPriceSlice")
	}

	*o = slice

	return nil
}

// MarketPriceExists checks if the MarketPrice row exists.
func MarketPriceExists(ctx context.Context, exec boil.ContextExecutor, source string, baseCurrency string, currency string, time time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `market_price` where `source`=? AND `base_currency`=? AND `currency`=? AND `time`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, source, baseCurrency, currency, time)
	}
	row := exec.QueryRowContext(ctx, sql, source, baseCurrency, currency, time)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if market_price exists")
	}

	return exists, nil
}
