// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PoloniexDistribution is an object representing the database table.
type PoloniexDistribution struct {
	ID       int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	Date     time.Time     `boil:"date" json:"date" toml:"date" yaml:"date"`
	Currency string        `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Amount   types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Wallet   string        `boil:"wallet" json:"wallet" toml:"wallet" yaml:"wallet"`

	R *poloniexDistributionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L poloniexDistributionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PoloniexDistributionColumns = struct {
	ID       string
	Date     string
	Currency string
	Amount   string
	Wallet   string
}{
	ID:       "id",
	Date:     "date",
	Currency: "currency",
	Amount:   "amount",
	Wallet:   "wallet",
}

// Generated where

var PoloniexDistributionWhere = struct {
	ID       whereHelperint
	Date     whereHelpertime_Time
	Currency whereHelperstring
	Amount   whereHelpertypes_Decimal
	Wallet   whereHelperstring
}{
	ID:       whereHelperint{field: "`poloniex_distributions`.`id`"},
	Date:     whereHelpertime_Time{field: "`poloniex_distributions`.`date`"},
	Currency: whereHelperstring{field: "`poloniex_distributions`.`currency`"},
	Amount:   whereHelpertypes_Decimal{field: "`poloniex_distributions`.`amount`"},
	Wallet:   whereHelperstring{field: "`poloniex_distributions`.`wallet`"},
}

// PoloniexDistributionRels is where relationship names are stored.
var PoloniexDistributionRels = struct {
}{}

// poloniexDistributionR is where relationships are stored.
type poloniexDistributionR struct {
}

// NewStruct creates a new relationship struct
func (*poloniexDistributionR) NewStruct() *poloniexDistributionR {
	return &poloniexDistributionR{}
}

// poloniexDistributionL is where Load methods for each relationship are stored.
type poloniexDistributionL struct{}

var (
	poloniexDistributionAllColumns            = []string{"id", "date", "currency", "amount", "wallet"}
	poloniexDistributionColumnsWithoutDefault = []string{"date", "currency", "amount", "wallet"}
	poloniexDistributionColumnsWithDefault    = []string{"id"}
	poloniexDistributionPrimaryKeyColumns     = []string{"id"}
)

type (
	// PoloniexDistributionSlice is an alias for a slice of pointers to PoloniexDistribution.
	// This should generally be used opposed to []PoloniexDistribution.
	PoloniexDistributionSlice []*PoloniexDistribution
	// PoloniexDistributionHook is the signature for custom PoloniexDistribution hook methods
	PoloniexDistributionHook func(context.Context, boil.ContextExecutor, *PoloniexDistribution) error

	poloniexDistributionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	poloniexDistributionType                 = reflect.TypeOf(&PoloniexDistribution{})
	poloniexDistributionMapping              = queries.MakeStructMapping(poloniexDistributionType)
	poloniexDistributionPrimaryKeyMapping, _ = queries.BindMapping(poloniexDistributionType, poloniexDistributionMapping, poloniexDistributionPrimaryKeyColumns)
	poloniexDistributionInsertCacheMut       sync.RWMutex
	poloniexDistributionInsertCache          = make(map[string]insertCache)
	poloniexDistributionUpdateCacheMut       sync.RWMutex
	poloniexDistributionUpdateCache          = make(map[string]updateCache)
	poloniexDistributionUpsertCacheMut       sync.RWMutex
	poloniexDistributionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var poloniexDistributionBeforeInsertHooks []PoloniexDistributionHook
var poloniexDistributionBeforeUpdateHooks []PoloniexDistributionHook
var poloniexDistributionBeforeDeleteHooks []PoloniexDistributionHook
var poloniexDistributionBeforeUpsertHooks []PoloniexDistributionHook

var poloniexDistributionAfterInsertHooks []PoloniexDistributionHook
var poloniexDistributionAfterSelectHooks []PoloniexDistributionHook
var poloniexDistributionAfterUpdateHooks []PoloniexDistributionHook
var poloniexDistributionAfterDeleteHooks []PoloniexDistributionHook
var poloniexDistributionAfterUpsertHooks []PoloniexDistributionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PoloniexDistribution) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexDistributionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PoloniexDistribution) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexDistributionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PoloniexDistribution) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexDistributionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PoloniexDistribution) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexDistributionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PoloniexDistribution) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexDistributionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PoloniexDistribution) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexDistributionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PoloniexDistribution) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexDistributionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PoloniexDistribution) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexDistributionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PoloniexDistribution) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range poloniexDistributionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPoloniexDistributionHook registers your hook function for all future operations.
func AddPoloniexDistributionHook(hookPoint boil.HookPoint, poloniexDistributionHook PoloniexDistributionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		poloniexDistributionBeforeInsertHooks = append(poloniexDistributionBeforeInsertHooks, poloniexDistributionHook)
	case boil.BeforeUpdateHook:
		poloniexDistributionBeforeUpdateHooks = append(poloniexDistributionBeforeUpdateHooks, poloniexDistributionHook)
	case boil.BeforeDeleteHook:
		poloniexDistributionBeforeDeleteHooks = append(poloniexDistributionBeforeDeleteHooks, poloniexDistributionHook)
	case boil.BeforeUpsertHook:
		poloniexDistributionBeforeUpsertHooks = append(poloniexDistributionBeforeUpsertHooks, poloniexDistributionHook)
	case boil.AfterInsertHook:
		poloniexDistributionAfterInsertHooks = append(poloniexDistributionAfterInsertHooks, poloniexDistributionHook)
	case boil.AfterSelectHook:
		poloniexDistributionAfterSelectHooks = append(poloniexDistributionAfterSelectHooks, poloniexDistributionHook)
	case boil.AfterUpdateHook:
		poloniexDistributionAfterUpdateHooks = append(poloniexDistributionAfterUpdateHooks, poloniexDistributionHook)
	case boil.AfterDeleteHook:
		poloniexDistributionAfterDeleteHooks = append(poloniexDistributionAfterDeleteHooks, poloniexDistributionHook)
	case boil.AfterUpsertHook:
		poloniexDistributionAfterUpsertHooks = append(poloniexDistributionAfterUpsertHooks, poloniexDistributionHook)
	}
}

// One returns a single poloniexDistribution record from the query.
func (q poloniexDistributionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PoloniexDistribution, error) {
	o := &PoloniexDistribution{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for poloniex_distributions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PoloniexDistribution records from the query.
func (q poloniexDistributionQuery) All(ctx context.Context, exec boil.ContextExecutor) (PoloniexDistributionSlice, error) {
	var o []*PoloniexDistribution

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PoloniexDistribution slice")
	}

	if len(poloniexDistributionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PoloniexDistribution records in the query.
func (q poloniexDistributionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count poloniex_distributions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q poloniexDistributionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if poloniex_distributions exists")
	}

	return count > 0, nil
}

// PoloniexDistributions retrieves all the records using an executor.
func PoloniexDistributions(mods ...qm.QueryMod) poloniexDistributionQuery {
	mods = append(mods, qm.From("`poloniex_distributions`"))
	return poloniexDistributionQuery{NewQuery(mods...)}
}

// FindPoloniexDistribution retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPoloniexDistribution(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PoloniexDistribution, error) {
	poloniexDistributionObj := &PoloniexDistribution{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `poloniex_distributions` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, poloniexDistributionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from poloniex_distributions")
	}

	return poloniexDistributionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PoloniexDistribution) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no poloniex_distributions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(poloniexDistributionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	poloniexDistributionInsertCacheMut.RLock()
	cache, cached := poloniexDistributionInsertCache[key]
	poloniexDistributionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			poloniexDistributionAllColumns,
			poloniexDistributionColumnsWithDefault,
			poloniexDistributionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(poloniexDistributionType, poloniexDistributionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(poloniexDistributionType, poloniexDistributionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `poloniex_distributions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `poloniex_distributions` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `poloniex_distributions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, poloniexDistributionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into poloniex_distributions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == poloniexDistributionMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for poloniex_distributions")
	}

CacheNoHooks:
	if !cached {
		poloniexDistributionInsertCacheMut.Lock()
		poloniexDistributionInsertCache[key] = cache
		poloniexDistributionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PoloniexDistribution.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PoloniexDistribution) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	poloniexDistributionUpdateCacheMut.RLock()
	cache, cached := poloniexDistributionUpdateCache[key]
	poloniexDistributionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			poloniexDistributionAllColumns,
			poloniexDistributionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update poloniex_distributions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `poloniex_distributions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, poloniexDistributionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(poloniexDistributionType, poloniexDistributionMapping, append(wl, poloniexDistributionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update poloniex_distributions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for poloniex_distributions")
	}

	if !cached {
		poloniexDistributionUpdateCacheMut.Lock()
		poloniexDistributionUpdateCache[key] = cache
		poloniexDistributionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q poloniexDistributionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for poloniex_distributions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for poloniex_distributions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PoloniexDistributionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), poloniexDistributionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `poloniex_distributions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, poloniexDistributionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in poloniexDistribution slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all poloniexDistribution")
	}
	return rowsAff, nil
}

var mySQLPoloniexDistributionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PoloniexDistribution) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no poloniex_distributions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(poloniexDistributionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPoloniexDistributionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	poloniexDistributionUpsertCacheMut.RLock()
	cache, cached := poloniexDistributionUpsertCache[key]
	poloniexDistributionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			poloniexDistributionAllColumns,
			poloniexDistributionColumnsWithDefault,
			poloniexDistributionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			poloniexDistributionAllColumns,
			poloniexDistributionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert poloniex_distributions, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`poloniex_distributions`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `poloniex_distributions` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(poloniexDistributionType, poloniexDistributionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(poloniexDistributionType, poloniexDistributionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for poloniex_distributions")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == poloniexDistributionMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(poloniexDistributionType, poloniexDistributionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for poloniex_distributions")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for poloniex_distributions")
	}

CacheNoHooks:
	if !cached {
		poloniexDistributionUpsertCacheMut.Lock()
		poloniexDistributionUpsertCache[key] = cache
		poloniexDistributionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PoloniexDistribution record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PoloniexDistribution) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PoloniexDistribution provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), poloniexDistributionPrimaryKeyMapping)
	sql := "DELETE FROM `poloniex_distributions` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from poloniex_distributions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for poloniex_distributions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q poloniexDistributionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no poloniexDistributionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from poloniex_distributions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for poloniex_distributions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PoloniexDistributionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(poloniexDistributionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), poloniexDistributionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `poloniex_distributions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, poloniexDistributionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from poloniexDistribution slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for poloniex_distributions")
	}

	if len(poloniexDistributionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PoloniexDistribution) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPoloniexDistribution(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PoloniexDistributionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PoloniexDistributionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), poloniexDistributionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `poloniex_distributions`.* FROM `poloniex_distributions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, poloniexDistributionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PoloniexDistributionSlice")
	}

	*o = slice

	return nil
}

// PoloniexDistributionExists checks if the PoloniexDistribution row exists.
func PoloniexDistributionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `poloniex_distributions` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if poloniex_distributions exists")
	}

	return exists, nil
}
